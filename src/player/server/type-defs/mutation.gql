type Mutation {
  # user
  deleteUser: Void
	logIn(input: LogInInput!): JWT!
  followUser(userID: UUID!): User!
  unFollowUser(userID: UUID!): User!

  # queue
  clearQueues: Queue!
  clearNextQueues: Queue!
  nextQueueSong: Queue!
  previousQueueSong: Queue!
  queueSongNext(songID: UUID!): Queue!
  queueSongAfter(songID: UUID!): Queue!
  queueSongLater(songID: UUID!): Queue!
  playLibrary: Queue!
  playTopOneHundredSongs: Queue!
  playSong(songID: UUID!): Queue!
  playAlbum(albumID: UUID!): Queue!
  playPlaylist(playlistID: UUID!): Queue!
  jumpToSongInQueueNext(index: NonNegativeInt!): Queue!
  jumpToSongInQueueLater(index: NonNegativeInt!): Queue!
  removeSongFromQueueNext(index: NonNegativeInt!): Queue!
  removeSongFromQueueLater(index: NonNegativeInt!): Queue!
  shuffleNext: Queue!
  shuffleLibrary: Queue!
  shuffleAlbum(albumID: UUID!): Queue!
  shuffleArtist(artistID: UUID!): Queue!
  shufflePlaylist(playlistID: UUID!): Queue!
  shuffleLibraryCustom(input: ShuffleLibraryCustomInput!): Queue!

  # library
  deleteLibrary: Void
  addSongToLibrary(songID: UUID!): Song!
  addAlbumToLibrary(albumID: UUID!): Album!
  addArtistToLibrary(artistID: UUID!): Artist!
  addPlaylistToLibrary(playlistID: UUID!): Playlist!
  removeSongFromLibrary(songID: UUID!): Song!
  removeAlbumFromLibrary(albumID: UUID!): Album!
  removeArtistFromLibrary(artistID: UUID!): Artist!
  removePlaylistFromLibrary(playlistID: UUID!): Playlist!
  
  # playlist
  deletePlaylistByID(playlistID: UUID!): Void
  createPlaylist(input: CreatePlaylistInput!): Playlist!
  addSongToPlaylist(songID: UUID!, playlistID: UUID!): Playlist!
  addAlbumToPlaylist(albumID: UUID!, playlistID: UUID!): Playlist!
  updatePlaylistTitle(input: UpdatePlaylistTitleInput!): Playlist!
  updatePlaylistPrivacy(input: UpdatePlaylistPrivacyInput!): Playlist!
  removeSongFromPlaylist(playlistID: UUID!, index: NonNegativeInt!): Playlist!
}